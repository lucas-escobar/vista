/*
  Zola uses syntect for syntax highlighting. 

  This file assumes: 
    1. highlight_theme = "css" in Zola's config.toml.
    2. A theme has been applied with apply-theme() in user sass code.

  For maintainers: 
  The z-* variables are generated by syntect. The z-* variables generated can be
  seen in the files generated by setting the following in config.toml. This is
  how this file was originally derived.

  highlight_themes_css = [
    { theme = "base16-ocean-dark", filename = "syntax-theme-dark.css" },
    { theme = "base16-ocean-light", filename = "syntax-theme-light.css" },
  ]
*/

$syntax-fg: var(--theme-on-surface);
$syntax-bg: var(--theme-surface-container-lowest);

$syntax-comment: var(--theme-on-surface-variant);
$syntax-operator: var(--theme-on-surface);
$syntax-variable: var(--theme-on-surface);
$syntax-keyword: var(--theme-purple);
$syntax-storage: var(--theme-purple);
$syntax-function: var(--theme-blue);
$syntax-support-function: var(--theme-teal);
$syntax-class: var(--theme-yellow);
$syntax-meta-class: var(--theme-on-surface);
$syntax-string: var(--theme-green);
$syntax-number: var(--theme-orange);
$syntax-tag: var(--theme-on-surface);
$syntax-attribute: var(--theme-orange);
$syntax-attribute-id: var(--theme-blue);
$syntax-selector: var(--theme-purple);
$syntax-heading: var(--theme-blue);
$syntax-unit: var(--theme-orange);
$syntax-bold: var(--theme-yellow);
$syntax-italic: var(--theme-purple);
$syntax-inline-code: var(--theme-green);
$syntax-link: var(--theme-red);
$syntax-link-meta: var(--theme-orange);
$syntax-list: var(--theme-red);
$syntax-quote: var(--theme-orange);
$syntax-separator-bg: var(--theme-outline);
$syntax-inserted: var(--theme-green);

// The following were from the original dark ocean theme. I don't seem to use
// them but this can be solved later.
$syntax-deleted: #bf616a;
$syntax-changed: #b48ead;
$syntax-ignored: #4f5b66;
$syntax-untracked: #4f5b66;
$syntax-color-const: #96b5b4;
$syntax-regexp: #96b5b4;
$syntax-escape: #96b5b4;
$syntax-interpolation: #ab7967;
$syntax-invalid-bg: #bf616a;
$syntax-invalid-fg: #2b303b;
$syntax-git-deleted: #f92672;
$syntax-git-inserted: #a6e22e;
$syntax-git-changed: #967efb;
$syntax-git-ignored: #565656;
$syntax-git-untracked: #565656;

.z-code {
  // TODO the code in this block might need to be moved to user sass code
  // instead of in this lib
  color: $syntax-fg;
  background-color: $syntax-bg;
  font-family: monospace;
  padding: 0.5rem;
  margin: 0;
}

.z-text {
  background-color: $syntax-bg;
}

.z-variable.z-parameter.z-function {
  color: $syntax-fg;
}

.z-comment,
.z-punctuation.z-definition.z-comment {
  color: $syntax-comment;
}

.z-punctuation.z-definition.z-string,
.z-punctuation.z-definition.z-variable,
.z-punctuation.z-definition.z-parameters,
.z-punctuation.z-definition.z-array {
  color: $syntax-fg;
}

.z-none,
.z-keyword.z-operator {
  color: $syntax-operator;
}

.z-keyword {
  color: $syntax-keyword;
}

.z-variable {
  color: $syntax-variable;
}

.z-entity.z-name.z-function,
.z-meta.z-require,
.z-support.z-function.z-any-method {
  color: $syntax-function;
}

.z-support.z-class,
.z-entity.z-name.z-class,
.z-entity.z-name.z-type.z-class {
  color: $syntax-class;
}

.z-meta.z-class {
  color: $syntax-meta-class;
}

.z-keyword.z-other.z-special-method {
  color: $syntax-function;
}

.z-storage {
  color: $syntax-storage;
}

.z-support.z-function {
  color: $syntax-support-function;
}

.z-string,
.z-constant.z-other.z-symbol,
.z-entity.z-other.z-inherited-class {
  color: $syntax-string;
}

.z-constant.z-numeric,
.z-constant,
.z-none {
  color: $syntax-number;
}

.z-entity.z-name.z-tag {
  color: $syntax-tag;
}

.z-entity.z-other.z-attribute-name {
  color: $syntax-attribute;
}

.z-entity.z-other.z-attribute-name.z-id,
.z-punctuation.z-definition.z-entity {
  color: $syntax-attribute-id;
}

.z-meta.z-selector {
  color: $syntax-selector;
}

.z-markup.z-heading .z-punctuation.z-definition.z-heading,
.z-entity.z-name.z-section {
  color: $syntax-heading;
}

.z-keyword.z-other.z-unit {
  color: $syntax-unit;
}

.z-markup.z-bold,
.z-punctuation.z-definition.z-bold {
  color: $syntax-bold;
  font-weight: bold;
}

.z-markup.z-italic,
.z-punctuation.z-definition.z-italic {
  color: $syntax-italic;
  font-style: italic;
}

.z-markup.z-raw.z-inline {
  color: $syntax-inline-code;
}

.z-string.z-other.z-link {
  color: $syntax-link;
}

.z-meta.z-link {
  color: $syntax-link-meta;
}

.z-markup.z-list {
  color: $syntax-list;
}

.z-markup.z-quote {
  color: $syntax-quote;
}

.z-meta.z-separator {
  color: $syntax-fg;
  background-color: $syntax-separator-bg;
}

.z-markup.z-inserted,
.z-markup.z-inserted.z-git_gutter {
  color: $syntax-inserted;
}

.z-markup.z-deleted,
.z-markup.z-deleted.z-git_gutter {
  color: $syntax-deleted;
}

.z-markup.z-changed,
.z-markup.z-changed.z-git_gutter {
  color: $syntax-changed;
}

.z-markup.z-ignored,
.z-markup.z-ignored.z-git_gutter {
  color: $syntax-ignored;
}

.z-markup.z-untracked,
.z-markup.z-untracked.z-git_gutter {
  color: $syntax-untracked;
}

.z-constant.z-other.z-color,
.z-string.z-regexp,
.z-constant.z-character.z-escape {
  color: $syntax-color-const;
}

.z-punctuation.z-section.z-embedded,
.z-variable.z-interpolation {
  color: $syntax-interpolation;
}

.z-invalid.z-illegal {
  color: $syntax-invalid-fg;
  background-color: $syntax-invalid-bg;
}

.z-markup.z-deleted.z-git_gutter {
  color: $syntax-git-deleted;
}

.z-markup.z-inserted.z-git_gutter {
  color: $syntax-git-inserted;
}

.z-markup.z-changed.z-git_gutter {
  color: $syntax-git-changed;
}

.z-markup.z-ignored.z-git_gutter,
.z-markup.z-untracked.z-git_gutter {
  color: $syntax-git-ignored;
}

// Custom syntax highlighting. Only tested with rust code blocks.
.z-name {
  color: var(--theme-yellow);
}
.z-support.z-macro {
  color: var(--theme-red);
}
.z-support.z-type {
  color: var(--theme-orange);
}
.z-keyword {
  color: var(--theme-purple);
}
